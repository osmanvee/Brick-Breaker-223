
class GameSession{
	GameStatus{
		Idle{
			start()[hasEnoughBlocks()]{
				doDuplicateBlocks();
			}->Playing;
			start()[!hasEnoughBlocks()]{
				doDuplicateBlocks();
				doFillRandomBlocks();
			}->Playing;
		}
		Playing{
		   pause() ->Paused;
		 
		   update()[ballHitsBlock() && isLastBlock() && !gameIsAlmostDone()]{	
		   		doJumpToNextLevel();
		   }->Idle;
		    update()[ballHitsBlock() && isLastBlock() && gameIsAlmostDone()]{
		   		
		   }->Done;
		   update()[ballHitsBlock() && !isLastBlock()]{
		   doChangeDirection();
		   	doMoveBall();
		   
		   }->Playing;
		     update()[isballHitPaddle()]{
		     	doChangeDirection();
		   		doMoveBall();
		   }->Playing;
		    update()[isballHitWall()]{
		    doChangeDirection()
		    	doMoveBall();
		    }->Playing;
		   update()[ballIsOutOfBound() && !almostDead()]{
		   	doDecrementLives();
		   	doResetBallAndPaddle();
		   }->Paused;
		    update()[ballIsOutOfBound() && almostDead()]{
		   	doDecrementLives();
		   }->Done;
		   update(){
		   	doMoveBall()
		   }->Playing;
		   
		}
		Paused{
			resume()->Playing; 
		}
		Done{
			entry/{
				saveScoreAndDelete();
			};
		} 
	}
	private boolean hasEnoughBlocks(){return false;}
	private void doDuplicateBlocks(){}
	private void doFillRandomBlocks(){}
	private boolean isballHitPaddle(){return false;}
	private boolean isballHitWall(){return false;}
	private boolean ballHitsBlock(){return false;}
	private boolean ballIsOutOfBound(){return false;}
	private boolean saveScoreAndDelete(){return false;}
	private void doJumpToNextLevel(){};
	private boolean isLastBlock(){return false;}

	private boolean gameIsAlmostDone(){return false;}
	private void doResetBallAndPaddle(){};
	
	private boolean almostDead(){return false;}
	private void doMoveBall(){}
	private void doChangeDirection(){}

	private boolean checkLineIntersect(int x1,int y1,int x2,int y2,int x3,int y3,int x4,int y4){ return false;}
	
}