class PlayedGame {

  // State Machine
  
  playStatus {
    Ready {
      entry / { doSetup(); }
      play -> Moving;
    }
    Moving {
      pause -> Paused;
      move [hitPaddle()] / { doHitPaddleOrWall(); } -> Moving;
      move [isOutOfBoundsAndLastLife()] / { doOutOfBounds(); } -> GameOver;
      move [isOutOfBounds()] / { doOutOfBounds(); } -> Paused;
      move [hitLastBlockAndLastLevel()] / { doHitBlock(); } -> GameOver;
      move [hitLastBlock()] / { doHitBlockNextLevel(); } -> Ready;
      move [hitBlock()] / { doHitBlock(); } -> Moving;
      move [hitWall()] / { doHitPaddleOrWall(); } -> Moving;
      move / { doHitNothingAndNotOutOfBounds(); } -> Moving;
    }
    Paused {
      play -> Moving;
    }
    GameOver {
      entry / { doGameOver(); }
    }
  }
  
  // Guards
  
  private boolean hitPaddle() {
    // TODO implement
    return false;
  }

  private boolean isOutOfBoundsAndLastLife() {
    // TODO implement
    return false;
  }
  
  private boolean isOutOfBounds() {
    // TODO implement
    return false;
  }
  
  private boolean hitLastBlockAndLastLevel() {
    // TODO implement
    return false;
  }
  
  private boolean hitLastBlock(){
    // TODO implement
    return false;
  }
  
  private boolean hitBlock() {
    // TODO implement
    return false;
  }
  
  private boolean hitWall() {
    // TODO implement
    return false;
  }
  
  // Actions
  
  private void doSetup() {
    // TODO implement
  }
  
  private void doHitPaddleOrWall() {
    // TODO implement
  }

  private void doOutOfBounds() {
    // TODO implement
  }

  private void doHitBlock() {
    // TODO implement
  }

  private void doHitBlockNextLevel() {
    // TODO implement
  }

  private void doHitNothingAndNotOutOfBounds() {
    // TODO implement
  }

  private void doGameOver() {
    // TODO implement
  }
  
  
  // Helper methods 
  private BouncePoint calculateBouncePointPaddle(){
  	int x=(int)getCurrentPaddleX();
  	int y=(int)getCurrentPaddleY();
  	int length=(int)getCurrentPaddleLength();
  	int radius=Ball.BALL_DIAMETER/2;
  	int width=Paddle.PADDLE_WIDTH;
  	Rectangle2D A=new Rectangle2D.Float(x,y-radius,length,width );
  	Rectangle2D B=new Rectangle2D.Float(x-radius,y,length,width );
  	Rectangle2D C=new Rectangle2D.Float(x+length,y,length,width );
  	Rectangle2D F=new Rectangle2D.Float(x+length,y-radius,length,width);
  	Rectangle2D E=new Rectangle2D.Float(x-radius,y-radius,length,width);
  	
  	Line2D segment=new Line2D.Float((float)getCurrentBallX(),(float)getCurrentBallY(),
  			(float)(getCurrentBallX()+getBallDirectionX()),(float)(getCurrentBallY()+getBallDirectionY()));
  	
  	if(segment.intersects(A)){
  		
  	}else if(segment.intersects(B)){
  	
  	}else if(segment.intersects(C)){
  	
  	}else if(segment.intersects(F)){
  	
  	}else if(segment.intersects(E)){
  	
  	}
  	return null;
  }
  
  private BouncePoint calculateBouncePointWall(){
  	return null;
  }
  
  private void bounceBall(){
  
  }

}
