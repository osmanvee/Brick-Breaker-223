class PlayedGame {

  // State Machine
  
  playStatus {
    Ready {
      entry / { doSetup(); }
      play -> Moving;
    }
    Moving {
      pause -> Paused;
      move [hitPaddle()] / { doHitPaddleOrWall(); } -> Moving;
      move [isOutOfBoundsAndLastLife()] / { doOutOfBounds(); } -> GameOver;
      move [isOutOfBounds()] / { doOutOfBounds(); } -> Paused;
      move [hitLastBlockAndLastLevel()] / { doHitBlock(); } -> GameOver;
      move [hitLastBlock()] / { doHitBlockNextLevel(); } -> Ready;
      move [hitBlock()] / { doHitBlock(); } -> Moving;
      move [hitWall()] / { doHitPaddleOrWall(); } -> Moving;
      move / { doHitNothingAndNotOutOfBounds(); } -> Moving;
    }
    Paused {
      play -> Moving;
    }
    GameOver {
      entry / { doGameOver(); }
    }
  }
  
  // Guards
  
  private boolean hitPaddle() {
   BouncePoint bp=calculateBouncePointPaddle();
    setBounce(bp);
    return bp!=null;
  }

  private boolean isOutOfBoundsAndLastLife() {
   boolean outOfBounds = false;
     if (this.getLives() ==1) {
    	outOfBounds = isBallOutOfBounds();
    }
    return outOfBounds;
  }
  
  private boolean isOutOfBounds() {
     Boolean outOfBounds = isBallOutOfBounds();
    
    return outOfBounds;
  }
   private boolean isBallOutOfBounds() {
	   boolean outofbounds= false;
	   if (this.getCurrentBallY() + this.getBallDirectionY() + 5 > 355) {
		   outofbounds=true;
	   }
	   return outofbounds;
   }
  
   private boolean hitLastBlockAndLastLevel(){
  	
    Game game = this.getGame(); 
	int nrLevels = game.numberOfLevels(); 
	
	this.setBounce(null); 
	
	if(nrLevels == currentLevel) {
		int nrBlocks = numberOfBlocks(); 
		if(nrBlocks == 1) {
			PlayedBlockAssignment block = this.getBlock(0); 
			BouncePoint bp = calculateBouncePointBlock(block); 
			setBounce(bp); 
			return (bp!=null); 
		}
	}
    return false;
  }
  
    private boolean hitLastBlock(){
    int nrBlocks = numberOfBlocks(); 
	setBounce(null); 
	
	if(nrBlocks == 1) {
		PlayedBlockAssignment block = this.getBlock(0); 
		BouncePoint bp = calculateBouncePointBlock(block);
		setBounce(bp); 
		return (bp!=null); 
	}
    return false;
  }
    
   private boolean hitBlock(){
  
    int nrBlocks = numberOfBlocks();
	   setBounce(null); 
	   
	   for( PlayedBlockAssignment block : getBlocks()) {
		   BouncePoint bp = calculateBouncePointBlock(block); 		   
		   bounce = getBounce(); 
		   boolean closer = isCloser(bp, bounce); 
		   if(closer) {
		   bp.setHitBlock(block);
		   setBounce(bp);
		   } 
	   }
	   return (getBounce()!=null);
  }
    
  private boolean hitWall() {
    BouncePoint bp=calculateBouncePointWall();
    setBounce(bp);
    return bp!=null;
  }
  
  // Actions
  
  //TODO: this method has to be implemented. 	
   private void doSetup(){
	   
	   resetCurrentBallX(); 
	   resetCurrentBallY(); 
	   resetBallDirectionX(); 
	   resetBallDirectionY(); 
	   resetCurrentPaddleX(); 
	   
	   Game game = getGame(); 
	   
	   Level level = game.getLevel(currentLevel - 1); 
	   List<BlockAssignment> assignments = level.getBlockAssignments(); 
	   
	   for(BlockAssignment a : assignments) {
		   PlayedBlockAssignment pblock = new PlayedBlockAssignment(
				   game.WALL_PADDING + (Block.SIZE + game.COLUMNS_PADDING)* (a.getGridHorizontalPosition() - 1),
				   game.WALL_PADDING +(Block.SIZE + game.ROW_PADDING)*(a.getGridVerticalPosition() - 1), 
						   a.getBlock(), this); 
	   }
	   
	   while(numberOfBlocks() < game.getNrBlocksPerLevel()) {
		   //pick x and y randomly: 
		   //first pick a grid position randomly 
		   //if its already taken, try next position starting from the randomly 
		   Random rand=new Random();
		   int x = game.WALL_PADDING + (Block.SIZE + game.COLUMNS_PADDING)*rand.nextInt(15); 
		   int y =  game.WALL_PADDING +(Block.SIZE + game.ROW_PADDING)*rand.nextInt(15); 
		   boolean found=false;
		   for (PlayedBlockAssignment blockassi:getBlocks()){
		   		if(blockassi.getX()==x && blockassi.getY()==y){
		   			found=true;
		   			break;
		   		}
		   }
		   if(!found){
		   	PlayedBlockAssignment pblock = new PlayedBlockAssignment(x, y, game.getRandomBlock(), this);
		   } 
	   }
	   
  }

  
  private void doHitPaddleOrWall() {
     bounceBall();
  }

  private void doOutOfBounds() {
    this.setLives(lives-1);
    this.resetCurrentBallX();
    this.resetCurrentBallY();
    this.resetBallDirectionX();
    this.resetBallDirectionY();
    this.resetCurrentPaddleX();
  }

  private void doHitBlock() {
       int score = getScore(); 
	   bounce = getBounce(); 
	   PlayedBlockAssignment pblock = bounce.getHitBlock(); 
	   
	   Block block = pblock.getBlock(); 
	   int bscore = block.getPoints();
	   
	   this.setScore(score + bscore); 
	   pblock.delete();
	   bounceBall(); 
  }

  private void doHitBlockNextLevel() {
   	   doHitBlock(); 
	   int level = getCurrentLevel(); 
	   setCurrentLevel(level+1); 
	   
	   setCurrentPaddleLength(getGame().getPaddle().getMaxPaddleLength() -
			   (getGame().getPaddle().getMaxPaddleLength() - getGame().getPaddle().getMinPaddleLength())/
			   (getGame().numberOfLevels() - 1) * (getCurrentLevel() - 1));
	   
	   setWaitTime(INITIAL_WAIT_TIME * Math.pow(getGame().getBall().getBallSpeedIncreaseFactor(), 
			   (getCurrentLevel() - 1))); 
  }

  private void doHitNothingAndNotOutOfBounds() {
	  double x = getCurrentBallX();
	  double y = getCurrentBallY();
	  double dx = getBallDirectionX();
	  double dy = getBallDirectionY();
	  setCurrentBallX(x + dx);
	  setCurrentBallY(y + dy);
  }
  private void doGameOver() {
    Block223 block223 = this.getBlock223();
	   Player p = this.getPlayer();
	   
	   if (p != null) {
		   Game game = this.getGame();
		   HallOfFameEntry hof = new HallOfFameEntry(this.score, this.getPlayername(), p, game, block223);
		   game.setMostRecentEntry(hof);
	   }
	   this.delete();
  }
  
  
  // Helper methods 
  private BouncePoint calculateBouncePointPaddle(){
  	double x=getCurrentPaddleX();
  	double y=getCurrentPaddleY();
  	double length=getCurrentPaddleLength();
  	int radius=Ball.BALL_DIAMETER/2;
  	int width=Paddle.PADDLE_WIDTH;
  	Rectangle2D rectA=new Rectangle2D.Double(x,y-radius,length,width );
  	Rectangle2D rectB=new Rectangle2D.Double(x-radius,y,radius,width );
  	Rectangle2D rectC=new Rectangle2D.Double(x+length,y,radius,width );
  	Rectangle2D rectF=new Rectangle2D.Double(x+length,y-radius,radius,radius);
  	Rectangle2D rectE=new Rectangle2D.Double(x-radius,y-radius,radius,radius);
   	double currentX=getCurrentBallX();
    double currentY=getCurrentBallY();
   	double dX=getBallDirectionX();
    double dY=getBallDirectionY();
  	Line2D segment=new Line2D.Double(currentX,currentY,currentX+dX,currentY+dY);
  	
  	if(segment.intersects(rectA)){
  		if(dX==0){
  			return new BouncePoint(currentX,y-radius,BounceDirection.FLIP_Y);
  		}else{
  			double a=dY/dX;
  			double b=currentY-a*currentX;
  			double bounceY=y-radius;
  			double bounceX=(bounceY-b)/a;
  			return new BouncePoint(bounceX,bounceY,BounceDirection.FLIP_Y);
  		}
  	}else if(segment.intersects(rectB)){
  		if(dX!=0){
  			double a=dY/dX;
  			double b=currentY-a*currentX;
  			double bounceX=x-radius;
  			double bounceY=a*bounceX+b;
  			return new BouncePoint(bounceX,bounceY,BounceDirection.FLIP_X);
  		}
  	}else if(segment.intersects(rectC)){
  		if(dX!=0){
  			double a=dY/dX;
  			double b=currentY-a*currentX;
  			double bounceX=x+length+radius;
  			double bounceY=a*bounceX+b;
  			return new BouncePoint(bounceX,bounceY,BounceDirection.FLIP_X);
  		}
  	}else if(segment.intersects(rectE)){
  			double a;
  			if(dX!=0){
  				a=dY/dX;
  			}else {
  				a=0;
  			}
  			double b=currentY-a*currentX;
  			double A=1+Math.pow(a,2);
  			double B=2*a*(b-y)-2*x;
  			double C=Math.pow(x,2)+Math.pow(b-y,2)-radius;
  			double delta=Math.sqrt(Math.pow(B,2)-4*A*C);
  			double X=(-B-delta)/(2*A);
  			double Y=a*X+b;
  			if(Double.isNaN(X) || Double.isNaN(Y)){
				  				return null;
				  			}
  			if (dX<0){
  				return new BouncePoint(X,Y, BounceDirection.FLIP_Y);
  			}else{
  				return new BouncePoint(X,Y, BounceDirection.FLIP_X);
  			}
  		
  	}else if(segment.intersects(rectF)){
  			double a;
  			if(dX!=0){
  				a=dY/dX;
  			}else {
  				a=0;
  			}
  			double b=currentY-a*currentX;
  			double A=1+Math.pow(a,2);
  			double B=2*a*(b-y)-2*(x+length);
  			double C=Math.pow((x+length),2)+Math.pow(b-y,2)-radius;
  			double delta=Math.sqrt(Math.pow(B,2)-4*A*C);
  			double X=(-B+delta)/(2*A);
  			double Y=a*X+b;
  			if(Double.isNaN(X) || Double.isNaN(Y)){
				  				return null;
				  			}
  			if (dX<0){
  				return new BouncePoint(X,Y, BounceDirection.FLIP_X);
  			}else{
  				return new BouncePoint(X,Y, BounceDirection.FLIP_Y);
  			}
  		
  	}
  	return null;
  }
  
  private BouncePoint calculateBouncePointWall(){
  	double currentX=getCurrentBallX();
   double currentY=getCurrentBallY();
   double dX=getBallDirectionX();
   double dY=getBallDirectionY();
   
   if(currentY+dY<=5){
   		if(currentX+dX<=5){
   			return  new BouncePoint(5.0,5.0, BounceDirection.FLIP_BOTH);
   		}else if(currentX+dX>=385){
   			return  new BouncePoint(385.0,5.0, BounceDirection.FLIP_BOTH);
   		}else{
   			if(dX!=0){
   				double a=dY/dX;
  				double b=currentY-a*currentX;
  				double bounceY=5.0f;
  				double bounceX=(bounceY-b)/a;
  				return new BouncePoint(bounceX,bounceY,BounceDirection.FLIP_Y);
  			}else{
  				return new BouncePoint(currentX, 5.0, BounceDirection.FLIP_Y);
  			}
   		}
    }
    
    if(currentX+dX<=5){
    	if(dX!=0){
   				double a=dY/dX;
  				double b=currentY-a*currentX;
  				double bounceX=5.0f;
  				double bounceY=a*bounceX+b;
  				
  				return new BouncePoint(bounceX,bounceY,BounceDirection.FLIP_X);
  		}
    }
    if(currentX+dX>=385){
    	if(dX!=0){
   				double a=dY/dX;
  				double b=currentY-a*currentX;
  				double bounceX=385.0f;
  				double bounceY=a*bounceX+b;
  				
  				return new BouncePoint(bounceX,bounceY,BounceDirection.FLIP_X);
  		}
    }
  	return null;
  }
  
  private void bounceBall(){
  	BouncePoint bp=getBounce();
  	double currentX=getCurrentBallX();
  	double currentY=getCurrentBallY();
  	double incomingX=bp.getX()-currentX;
  	double incomingY=bp.getY()-currentY;
  	double remainingX=getBallDirectionX()-incomingX;
  	double remainingY=getBallDirectionY()-incomingY;
  	if(remainingX==0 && remainingY==0){
  		setCurrentBallX(bp.getX());
  		setCurrentBallY(bp.getY());
  	}else{
  		double newDirX,newDirY,newX,newY;
  		if(bp.getDirection()==BounceDirection.FLIP_X){
  			 newDirX=-getBallDirectionX();
  			 newDirY=getBallDirectionY()+sign(getBallDirectionY())*0.1*Math.abs(newDirX);
  			 if(getBallDirectionX()!=0){
  			 newX=bp.getX()+remainingX*newDirX/getBallDirectionX();
  			 }else {
  			 newX=bp.getX()+remainingY*newDirX/getBallDirectionY();
  			 }
  			 if(getBallDirectionY()!=0){
  				 newY=bp.getY()+remainingY*newDirY/getBallDirectionY();
  			 }else{
  			 	newY=bp.getY()+remainingX*newDirY/getBallDirectionX();
  			 }
  		}else if (bp.getDirection()==BounceDirection.FLIP_Y){
  			 newDirY=-getBallDirectionY();
  			 newDirX=getBallDirectionX()+sign(getBallDirectionX())*0.1*Math.abs(newDirY);
  			if(getBallDirectionX()!=0){
  			 newX=bp.getX()+remainingX*newDirX/getBallDirectionX();
  			 }else {
  			 newX=bp.getX()+remainingY*newDirX/getBallDirectionY();
  			 }
  			 if(getBallDirectionY()!=0){
  				 newY=bp.getY()+remainingY*newDirY/getBallDirectionY();
  			 }else{
  			 	newY=bp.getY()+remainingX*newDirY/getBallDirectionX();
  			 }
  		}else{
  			 newDirX=-getBallDirectionX();
  			 newDirY=-getBallDirectionY();
  			if(getBallDirectionX()!=0){
  			 newX=bp.getX()+remainingX*newDirX/getBallDirectionX();
  			 }else {
  			 newX=bp.getX()+remainingY*newDirX/getBallDirectionY();
  			 }
  			 if(getBallDirectionY()!=0){
  				 newY=bp.getY()+remainingY*newDirY/getBallDirectionY();
  			 }else{
  			 	newY=bp.getY()+remainingX*newDirY/getBallDirectionX();
  			 }
  		}
  			setCurrentBallX(newX);
  			setCurrentBallY(newY);
  			setBallDirectionX(newDirX);
  			setBallDirectionY(newDirY);
  	}
  	setBounce(null);
  }
  private int sign(double val){
		if(val>=0){
			return 1;
		}  
		return -1;
  
  }
  
     private BouncePoint calculateBouncePointBlock(PlayedBlockAssignment block){
    	int x=block.getX();
	  	int y=block.getY();
	  	int length=block.getBlock().SIZE;
	  	int radius=Ball.BALL_DIAMETER/2;
	  	int width=block.getBlock().SIZE;

	  	Rectangle2D rectA=new Rectangle2D.Double(x,y-radius,length,radius );
	  	Rectangle2D rectB=new Rectangle2D.Double(x-radius,y,radius,length );
	  	Rectangle2D rectC=new Rectangle2D.Double(x+length,y,radius,length );
	  	Rectangle2D rectF=new Rectangle2D.Double(x+length,y-radius,radius,radius);  	
	  	Rectangle2D rectE=new Rectangle2D.Double(x-radius,y-radius,radius,radius);
	  	
	  	Rectangle2D rectG=new Rectangle2D.Double(x-radius,y+length,radius,radius);
	  	Rectangle2D rectD=new Rectangle2D.Double(x,y+length,radius,radius);
	  	Rectangle2D rectH=new Rectangle2D.Double(x+length,y+length,radius,radius);
	  	
	   	double currentX=getCurrentBallX();
	    double currentY=getCurrentBallY();
	   	double dX=getBallDirectionX();
	    double dY=getBallDirectionY();
	  	Line2D segment=new Line2D.Double(currentX,currentY,currentX+dX,currentY+dY);
	  	
	  	if(segment.intersects(rectA)){
	  		if(dX==0){
	  			BouncePoint bp= new BouncePoint(currentX,y-radius,BounceDirection.FLIP_Y);
	  			bp.setHitBlock(block);
	  			return bp;
	  		}else{
	  			double a=dY/dX;
	  			double b=currentY-a*currentX;
	  			double bounceY=y-radius;
	  			double bounceX=(bounceY-b)/a;
	  			BouncePoint bp= new BouncePoint(bounceX,bounceY,BounceDirection.FLIP_Y);
	  			bp.setHitBlock(block);
	  			return bp;
	  		}
	  	}else if(segment.intersects(rectB)){
	  		if(dX!=0){
	  			double a=dY/dX;
	  			double b=currentY-a*currentX;
	  			double bounceX=x-radius;
	  			double bounceY=a*bounceX+b;
	  			BouncePoint bp= new BouncePoint(bounceX,bounceY,BounceDirection.FLIP_X);
	  			bp.setHitBlock(block);
	  			return bp;
	  		}
	  	}else if(segment.intersects(rectC)){
	  		if(dX!=0){
	  			double a=dY/dX;
	  			double b=currentY-a*currentX;
	  			double bounceX=x+radius+length;
	  			double bounceY=a*bounceX+b;
	  			BouncePoint bp= new BouncePoint(bounceX,bounceY,BounceDirection.FLIP_X);
	  			bp.setHitBlock(block);
	  			return bp;
	  		}
	  	}else if(segment.intersects(rectE)){
	  		double a;
  			if(dX!=0){
  				a=dY/dX;
  			}else {
  				a=0;
  			}
	  			
	  			double b=currentY-a*currentX;
	  			double A=1+Math.pow(a,2);
	  			double B=2*a*(b-y)-2*x;
	  			double C=Math.pow(x,2)+Math.pow(b-y,2)-radius;
	  			double delta=Math.sqrt(Math.pow(B,2)-4*A*C);
	  			double X=(-B-delta)/(2*A);
	  			double Y=a*X+b;
	  			if(Double.isNaN(X) || Double.isNaN(Y)){
				  				return null;
				  			}
	  			if (dX<0){
	  				BouncePoint bp= new BouncePoint(X,Y, BounceDirection.FLIP_Y);
	  				bp.setHitBlock(block);
	  				return bp;
	  			}else{
	  				BouncePoint bp= new BouncePoint(X,Y, BounceDirection.FLIP_X);
	  				bp.setHitBlock(block);
	  				return bp;
	  			}
	  		
	  	}
	  	else if(segment.intersects(rectF)){
	  		double a;
  			if(dX!=0){
  				a=dY/dX;
  			}else {
  				a=0;
  			}
	  			
	  			double b=currentY-a*currentX;
	  			double A=1+Math.pow(a,2);
	  			double B=2*a*(b-y)-2*(x+length);
	  			double C=Math.pow((x+length),2)+Math.pow(b-y,2)-radius;
	  			double delta=Math.sqrt(Math.pow(B,2)-4*A*C);
	  			double X=(-B+delta)/(2*A);
	  			double Y=a*X+b;
	  			if(Double.isNaN(X) || Double.isNaN(Y)){
				  				return null;
				  			}
	  			if (dX<0){
	  				BouncePoint bp= new BouncePoint(X,Y, BounceDirection.FLIP_X);
	  				bp.setHitBlock(block);
	  				return bp;
	  			}else{
	  				BouncePoint bp= new BouncePoint(X,Y, BounceDirection.FLIP_Y);
	  				bp.setHitBlock(block);
	  					return bp;
	  			}
	  		}
	  		else if(segment.intersects(rectG)){
		  			double a;
  					if(dX!=0){
  						a=dY/dX;
  					}else {
  						a=0;
  					}
		  			double b=currentY-a*currentX;
		  			double A=1+Math.pow(a,2);
		  			double B=2*a*(b-y-length)-2*(x);
		  			double C=Math.pow((x),2)+Math.pow(b-y-length,2)-radius;
		  			double delta=Math.sqrt(Math.pow(B,2)-4*A*C);
		  			double X=(-B-delta)/(2*A);
		  			double Y=a*X+b;
		  			if(Double.isNaN(X) || Double.isNaN(Y)){
				  				return null;
				  			}
		  			if (dX<0){
		  				BouncePoint bp= new BouncePoint(X,Y, BounceDirection.FLIP_Y);
		  				bp.setHitBlock(block);
	  					return bp;
		  			}else{
		  				BouncePoint bp= new BouncePoint(X,Y, BounceDirection.FLIP_X);
		  				bp.setHitBlock(block);
	  					return bp;
		  			}
		  		
	  		}
		  		else if(segment.intersects(rectD)){
			  		if(dX!=0){
			  			double a=dY/dX;
			  			double b=currentY-a*currentX;
			  			double bounceY=y+length+radius;
			  			double bounceX=(bounceY-b)/a;
			  			BouncePoint bp= new BouncePoint(bounceX,bounceY,BounceDirection.FLIP_Y);
			  			bp.setHitBlock(block);
	  					return bp;
			  		}else{
			  			BouncePoint bp= new BouncePoint(currentX,y+length+radius,BounceDirection.FLIP_Y);
	  					bp.setHitBlock(block);
	  					return bp;
			  		}
		  		}
			  		else if(segment.intersects(rectH)){
				  			double a;
  							if(dX!=0){
  								a=dY/dX;
  							}else {
  								a=0;
  							}
				  			double b=currentY-a*currentX;
				  			double A=1+Math.pow(a,2);
				  			double B=2*a*(b-y-length)-2*(x+length);
				  			double C=Math.pow((x+length),2)+Math.pow(b-y-length,2)-radius;
				  			double delta=Math.sqrt(Math.pow(B,2)-4*A*C);
				  			double X=(-B+delta)/(2*A);
				  			double Y=a*X+b;
				  			if(Double.isNaN(X) || Double.isNaN(Y)){
				  				return null;
				  			}
				  			if (dX<0){
				  				BouncePoint bp= new BouncePoint(X,Y, BounceDirection.FLIP_X);
				  				bp.setHitBlock(block);
	  							return bp;
				  			}else{
				  				BouncePoint bp= new BouncePoint(X,Y, BounceDirection.FLIP_Y);
				  				bp.setHitBlock(block);
	  							return bp;
				  			}
				  		
	  	}
	  	return null;
  }

  
   private boolean isCloser(BouncePoint first, BouncePoint second) {
	    double ballPosX = getCurrentBallX(); 
	    double ballPosY = getCurrentBallY(); 
	    
	    if(first == null) {
	    	return false; 
	    }
	    
	    if(second == null) {
	    	return true; 
	    }
	    
	    //we will use euclidean distance to see which is closer 
	    double distToFirst = Math.sqrt(Math.pow((first.getX() - ballPosX),2) + 
	    							   Math.pow(first.getY() - ballPosY, 2));

	    double distToSecond = Math.sqrt(Math.pow((second.getX() - ballPosX),2) + 
				   Math.pow(second.getY() - ballPosY, 2));
	    
	    if(distToFirst <= distToSecond) {
	    	return true; 
	    }
	    return false; 
	  }



	  }